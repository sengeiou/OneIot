package com.coband.watchassistant;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.coband.watchassistant.Weather;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER".
*/
public class WeatherDao extends AbstractDao<Weather, Long> {

    public static final String TABLENAME = "WEATHER";

    /**
     * Properties of entity Weather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Weather = new Property(1, String.class, "weather", false, "WEATHER");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property High = new Property(4, int.class, "high", false, "HIGH");
        public final static Property Low = new Property(5, int.class, "low", false, "LOW");
        public final static Property Update = new Property(6, String.class, "update", false, "UPDATE");
        public final static Property City = new Property(7, String.class, "city", false, "CITY");
        public final static Property Index = new Property(8, int.class, "index", false, "INDEX");
        public final static Property Week = new Property(9, String.class, "week", false, "WEEK");
        public final static Property Temp = new Property(10, int.class, "temp", false, "TEMP");
    };


    public WeatherDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WEATHER\" TEXT," + // 1: weather
                "\"DATE\" TEXT," + // 2: date
                "\"CODE\" TEXT," + // 3: code
                "\"HIGH\" INTEGER NOT NULL ," + // 4: high
                "\"LOW\" INTEGER NOT NULL ," + // 5: low
                "\"UPDATE\" TEXT," + // 6: update
                "\"CITY\" TEXT," + // 7: city
                "\"INDEX\" INTEGER NOT NULL ," + // 8: index
                "\"WEEK\" TEXT," + // 9: week
                "\"TEMP\" INTEGER NOT NULL );"); // 10: temp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Weather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(2, weather);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
        stmt.bindLong(5, entity.getHigh());
        stmt.bindLong(6, entity.getLow());
 
        String update = entity.getUpdate();
        if (update != null) {
            stmt.bindString(7, update);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
        stmt.bindLong(9, entity.getIndex());
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(10, week);
        }
        stmt.bindLong(11, entity.getTemp());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Weather readEntity(Cursor cursor, int offset) {
        Weather entity = new Weather( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // weather
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.getInt(offset + 4), // high
            cursor.getInt(offset + 5), // low
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // update
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // city
            cursor.getInt(offset + 8), // index
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // week
            cursor.getInt(offset + 10) // temp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Weather entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWeather(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHigh(cursor.getInt(offset + 4));
        entity.setLow(cursor.getInt(offset + 5));
        entity.setUpdate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIndex(cursor.getInt(offset + 8));
        entity.setWeek(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTemp(cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Weather entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Weather entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
