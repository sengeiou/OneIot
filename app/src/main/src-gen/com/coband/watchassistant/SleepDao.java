package com.coband.watchassistant;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.coband.watchassistant.Sleep;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SLEEP".
*/
public class SleepDao extends AbstractDao<Sleep, Long> {

    public static final String TABLENAME = "SLEEP";

    /**
     * Properties of entity Sleep.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, long.class, "date", false, "DATE");
        public final static Property Deep = new Property(2, int.class, "deep", false, "DEEP");
        public final static Property Light = new Property(3, int.class, "light", false, "LIGHT");
        public final static Property WakeCount = new Property(4, int.class, "wakeCount", false, "WAKE_COUNT");
        public final static Property TotalTime = new Property(5, int.class, "totalTime", false, "TOTAL_TIME");
        public final static Property Upload = new Property(6, boolean.class, "upload", false, "UPLOAD");
        public final static Property Uid = new Property(7, String.class, "uid", false, "UID");
        public final static Property BeginTime = new Property(8, Integer.class, "beginTime", false, "BEGIN_TIME");
        public final static Property Mode = new Property(9, Integer.class, "mode", false, "MODE");
    };


    public SleepDao(DaoConfig config) {
        super(config);
    }
    
    public SleepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SLEEP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" INTEGER NOT NULL UNIQUE ," + // 1: date
                "\"DEEP\" INTEGER NOT NULL ," + // 2: deep
                "\"LIGHT\" INTEGER NOT NULL ," + // 3: light
                "\"WAKE_COUNT\" INTEGER NOT NULL ," + // 4: wakeCount
                "\"TOTAL_TIME\" INTEGER NOT NULL ," + // 5: totalTime
                "\"UPLOAD\" INTEGER NOT NULL ," + // 6: upload
                "\"UID\" TEXT," + // 7: uid
                "\"BEGIN_TIME\" INTEGER," + // 8: beginTime
                "\"MODE\" INTEGER);"); // 9: mode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SLEEP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sleep entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDate());
        stmt.bindLong(3, entity.getDeep());
        stmt.bindLong(4, entity.getLight());
        stmt.bindLong(5, entity.getWakeCount());
        stmt.bindLong(6, entity.getTotalTime());
        stmt.bindLong(7, entity.getUpload() ? 1L: 0L);
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(8, uid);
        }
 
        Integer beginTime = entity.getBeginTime();
        if (beginTime != null) {
            stmt.bindLong(9, beginTime);
        }
 
        Integer mode = entity.getMode();
        if (mode != null) {
            stmt.bindLong(10, mode);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sleep readEntity(Cursor cursor, int offset) {
        Sleep entity = new Sleep( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // date
            cursor.getInt(offset + 2), // deep
            cursor.getInt(offset + 3), // light
            cursor.getInt(offset + 4), // wakeCount
            cursor.getInt(offset + 5), // totalTime
            cursor.getShort(offset + 6) != 0, // upload
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uid
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // beginTime
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // mode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sleep entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.getLong(offset + 1));
        entity.setDeep(cursor.getInt(offset + 2));
        entity.setLight(cursor.getInt(offset + 3));
        entity.setWakeCount(cursor.getInt(offset + 4));
        entity.setTotalTime(cursor.getInt(offset + 5));
        entity.setUpload(cursor.getShort(offset + 6) != 0);
        entity.setUid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBeginTime(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMode(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Sleep entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Sleep entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
