package com.coband.watchassistant;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.coband.watchassistant.Card;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD".
*/
public class CardDao extends AbstractDao<Card, Long> {

    public static final String TABLENAME = "CARD";

    /**
     * Properties of entity Card.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Time = new Property(2, long.class, "time", false, "TIME");
        public final static Property Message = new Property(3, String.class, "message", false, "MESSAGE");
        public final static Property UncompleteStep = new Property(4, int.class, "uncompleteStep", false, "UNCOMPLETE_STEP");
        public final static Property CompletedStep = new Property(5, int.class, "completedStep", false, "COMPLETED_STEP");
        public final static Property StepCompletion = new Property(6, int.class, "stepCompletion", false, "STEP_COMPLETION");
        public final static Property SleepTime = new Property(7, int.class, "sleepTime", false, "SLEEP_TIME");
        public final static Property HeartRate = new Property(8, int.class, "heartRate", false, "HEART_RATE");
    };


    public CardDao(DaoConfig config) {
        super(config);
    }
    
    public CardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"MESSAGE\" TEXT," + // 3: message
                "\"UNCOMPLETE_STEP\" INTEGER NOT NULL ," + // 4: uncompleteStep
                "\"COMPLETED_STEP\" INTEGER NOT NULL ," + // 5: completedStep
                "\"STEP_COMPLETION\" INTEGER NOT NULL ," + // 6: stepCompletion
                "\"SLEEP_TIME\" INTEGER NOT NULL ," + // 7: sleepTime
                "\"HEART_RATE\" INTEGER NOT NULL );"); // 8: heartRate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getTime());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
        stmt.bindLong(5, entity.getUncompleteStep());
        stmt.bindLong(6, entity.getCompletedStep());
        stmt.bindLong(7, entity.getStepCompletion());
        stmt.bindLong(8, entity.getSleepTime());
        stmt.bindLong(9, entity.getHeartRate());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Card readEntity(Cursor cursor, int offset) {
        Card entity = new Card( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // message
            cursor.getInt(offset + 4), // uncompleteStep
            cursor.getInt(offset + 5), // completedStep
            cursor.getInt(offset + 6), // stepCompletion
            cursor.getInt(offset + 7), // sleepTime
            cursor.getInt(offset + 8) // heartRate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Card entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setTime(cursor.getLong(offset + 2));
        entity.setMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUncompleteStep(cursor.getInt(offset + 4));
        entity.setCompletedStep(cursor.getInt(offset + 5));
        entity.setStepCompletion(cursor.getInt(offset + 6));
        entity.setSleepTime(cursor.getInt(offset + 7));
        entity.setHeartRate(cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Card entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Card entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
