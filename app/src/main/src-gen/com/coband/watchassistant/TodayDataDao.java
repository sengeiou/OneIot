package com.coband.watchassistant;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.coband.watchassistant.TodayData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TODAY_DATA".
*/
public class TodayDataDao extends AbstractDao<TodayData, Long> {

    public static final String TABLENAME = "TODAY_DATA";

    /**
     * Properties of entity TodayData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, long.class, "date", false, "DATE");
        public final static Property Cal = new Property(2, float.class, "cal", false, "CAL");
        public final static Property Dis = new Property(3, float.class, "dis", false, "DIS");
        public final static Property Step = new Property(4, long.class, "step", false, "STEP");
        public final static Property Node = new Property(5, int.class, "node", false, "NODE");
        public final static Property Tt = new Property(6, long.class, "tt", false, "TT");
    };


    public TodayDataDao(DaoConfig config) {
        super(config);
    }
    
    public TodayDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TODAY_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" INTEGER NOT NULL ," + // 1: date
                "\"CAL\" REAL NOT NULL ," + // 2: cal
                "\"DIS\" REAL NOT NULL ," + // 3: dis
                "\"STEP\" INTEGER NOT NULL ," + // 4: step
                "\"NODE\" INTEGER NOT NULL ," + // 5: node
                "\"TT\" INTEGER NOT NULL );"); // 6: tt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TODAY_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TodayData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDate());
        stmt.bindDouble(3, entity.getCal());
        stmt.bindDouble(4, entity.getDis());
        stmt.bindLong(5, entity.getStep());
        stmt.bindLong(6, entity.getNode());
        stmt.bindLong(7, entity.getTt());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TodayData readEntity(Cursor cursor, int offset) {
        TodayData entity = new TodayData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // date
            cursor.getFloat(offset + 2), // cal
            cursor.getFloat(offset + 3), // dis
            cursor.getLong(offset + 4), // step
            cursor.getInt(offset + 5), // node
            cursor.getLong(offset + 6) // tt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TodayData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.getLong(offset + 1));
        entity.setCal(cursor.getFloat(offset + 2));
        entity.setDis(cursor.getFloat(offset + 3));
        entity.setStep(cursor.getLong(offset + 4));
        entity.setNode(cursor.getInt(offset + 5));
        entity.setTt(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TodayData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TodayData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
