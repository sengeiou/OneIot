package com.coband.watchassistant;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.coband.watchassistant.StepNodeDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP_NODE_DETAIL".
*/
public class StepNodeDetailDao extends AbstractDao<StepNodeDetail, Long> {

    public static final String TABLENAME = "STEP_NODE_DETAIL";

    /**
     * Properties of entity StepNodeDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, long.class, "date", false, "DATE");
        public final static Property Offset = new Property(2, int.class, "offset", false, "OFFSET");
        public final static Property Step = new Property(3, long.class, "step", false, "STEP");
        public final static Property Calories = new Property(4, int.class, "calories", false, "CALORIES");
        public final static Property Distance = new Property(5, int.class, "distance", false, "DISTANCE");
        public final static Property Uid = new Property(6, String.class, "uid", false, "UID");
    };


    public StepNodeDetailDao(DaoConfig config) {
        super(config);
    }
    
    public StepNodeDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP_NODE_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" INTEGER NOT NULL ," + // 1: date
                "\"OFFSET\" INTEGER NOT NULL ," + // 2: offset
                "\"STEP\" INTEGER NOT NULL ," + // 3: step
                "\"CALORIES\" INTEGER NOT NULL ," + // 4: calories
                "\"DISTANCE\" INTEGER NOT NULL ," + // 5: distance
                "\"UID\" TEXT NOT NULL );"); // 6: uid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP_NODE_DETAIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StepNodeDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDate());
        stmt.bindLong(3, entity.getOffset());
        stmt.bindLong(4, entity.getStep());
        stmt.bindLong(5, entity.getCalories());
        stmt.bindLong(6, entity.getDistance());
        stmt.bindString(7, entity.getUid());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StepNodeDetail readEntity(Cursor cursor, int offset) {
        StepNodeDetail entity = new StepNodeDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // date
            cursor.getInt(offset + 2), // offset
            cursor.getLong(offset + 3), // step
            cursor.getInt(offset + 4), // calories
            cursor.getInt(offset + 5), // distance
            cursor.getString(offset + 6) // uid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StepNodeDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.getLong(offset + 1));
        entity.setOffset(cursor.getInt(offset + 2));
        entity.setStep(cursor.getLong(offset + 3));
        entity.setCalories(cursor.getInt(offset + 4));
        entity.setDistance(cursor.getInt(offset + 5));
        entity.setUid(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StepNodeDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StepNodeDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
