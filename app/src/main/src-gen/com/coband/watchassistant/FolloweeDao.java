package com.coband.watchassistant;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.coband.watchassistant.Followee;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOLLOWEE".
*/
public class FolloweeDao extends AbstractDao<Followee, String> {

    public static final String TABLENAME = "FOLLOWEE";

    /**
     * Properties of entity Followee.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SurfaceImg = new Property(0, String.class, "surfaceImg", false, "SURFACE_IMG");
        public final static Property UpdatedAt = new Property(1, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "AVATAR");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property DayHighestSteps = new Property(5, int.class, "dayHighestSteps", false, "DAY_HIGHEST_STEPS");
        public final static Property ArchivementList = new Property(6, String.class, "archivementList", false, "ARCHIVEMENT_LIST");
        public final static Property ObjectId = new Property(7, String.class, "objectId", true, "OBJECT_ID");
        public final static Property UserId = new Property(8, Long.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;

    private Query<Followee> user_FolloweesQuery;

    public FolloweeDao(DaoConfig config) {
        super(config);
    }
    
    public FolloweeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOLLOWEE\" (" + //
                "\"SURFACE_IMG\" TEXT," + // 0: surfaceImg
                "\"UPDATED_AT\" TEXT," + // 1: updatedAt
                "\"AVATAR\" TEXT," + // 2: avatar
                "\"NICK_NAME\" TEXT," + // 3: nickName
                "\"USER_NAME\" TEXT," + // 4: userName
                "\"DAY_HIGHEST_STEPS\" INTEGER NOT NULL ," + // 5: dayHighestSteps
                "\"ARCHIVEMENT_LIST\" TEXT," + // 6: archivementList
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 7: objectId
                "\"USER_ID\" INTEGER);"); // 8: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOLLOWEE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Followee entity) {
        stmt.clearBindings();
 
        String surfaceImg = entity.getSurfaceImg();
        if (surfaceImg != null) {
            stmt.bindString(1, surfaceImg);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(2, updatedAt);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
        stmt.bindLong(6, entity.getDayHighestSteps());
 
        String archivementList = entity.getArchivementList();
        if (archivementList != null) {
            stmt.bindString(7, archivementList);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(8, objectId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(9, userId);
        }
    }

    @Override
    protected void attachEntity(Followee entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7);
    }    

    /** @inheritdoc */
    @Override
    public Followee readEntity(Cursor cursor, int offset) {
        Followee entity = new Followee( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // surfaceImg
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // updatedAt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userName
            cursor.getInt(offset + 5), // dayHighestSteps
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // archivementList
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // objectId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Followee entity, int offset) {
        entity.setSurfaceImg(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUpdatedAt(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDayHighestSteps(cursor.getInt(offset + 5));
        entity.setArchivementList(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setObjectId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Followee entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Followee entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "followees" to-many relationship of User. */
    public List<Followee> _queryUser_Followees(Long userId) {
        synchronized (this) {
            if (user_FolloweesQuery == null) {
                QueryBuilder<Followee> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_FolloweesQuery = queryBuilder.build();
            }
        }
        Query<Followee> query = user_FolloweesQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM FOLLOWEE T");
            builder.append(" LEFT JOIN USER T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Followee loadCurrentDeep(Cursor cursor, boolean lock) {
        Followee entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);

        return entity;    
    }

    public Followee loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Followee> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Followee> list = new ArrayList<Followee>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Followee> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Followee> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
