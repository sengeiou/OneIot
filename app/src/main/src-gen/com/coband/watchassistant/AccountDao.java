package com.coband.watchassistant;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.coband.watchassistant.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT".
*/
public class AccountDao extends AbstractDao<Account, Long> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Token = new Property(3, String.class, "token", false, "TOKEN");
        public final static Property UnitSystem = new Property(4, String.class, "unitSystem", false, "UNIT_SYSTEM");
        public final static Property Birthday = new Property(5, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Gender = new Property(6, String.class, "gender", false, "GENDER");
        public final static Property Nickname = new Property(7, String.class, "nickname", false, "NICKNAME");
        public final static Property Height = new Property(8, Integer.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(9, Double.class, "weight", false, "WEIGHT");
        public final static Property StepTarget = new Property(10, Integer.class, "stepTarget", false, "STEP_TARGET");
        public final static Property WeightTarget = new Property(11, Double.class, "weightTarget", false, "WEIGHT_TARGET");
        public final static Property SleepTarget = new Property(12, Integer.class, "sleepTarget", false, "SLEEP_TARGET");
        public final static Property Uid = new Property(13, String.class, "uid", false, "UID");
        public final static Property Did = new Property(14, String.class, "did", false, "DID");
        public final static Property AccountVerified = new Property(15, Boolean.class, "accountVerified", false, "ACCOUNT_VERIFIED");
        public final static Property Avatar = new Property(16, String.class, "avatar", false, "AVATAR");
        public final static Property AvatarMD5 = new Property(17, String.class, "avatarMD5", false, "AVATAR_MD5");
        public final static Property Background = new Property(18, String.class, "background", false, "BACKGROUND");
        public final static Property BackgroundMD5 = new Property(19, String.class, "backgroundMD5", false, "BACKGROUND_MD5");
        public final static Property BloodType = new Property(20, String.class, "bloodType", false, "BLOOD_TYPE");
        public final static Property City = new Property(21, String.class, "city", false, "CITY");
        public final static Property Country = new Property(22, String.class, "country", false, "COUNTRY");
        public final static Property Latitude = new Property(23, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(24, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Province = new Property(25, String.class, "province", false, "PROVINCE");
        public final static Property Language = new Property(26, String.class, "language", false, "LANGUAGE");
        public final static Property OsType = new Property(27, String.class, "osType", false, "OS_TYPE");
        public final static Property OsVersion = new Property(28, String.class, "osVersion", false, "OS_VERSION");
        public final static Property PhoneModel = new Property(29, String.class, "phoneModel", false, "PHONE_MODEL");
        public final static Property Timezone = new Property(30, Integer.class, "timezone", false, "TIMEZONE");
        public final static Property Achievements = new Property(31, String.class, "achievements", false, "ACHIEVEMENTS");
        public final static Property MaxDaySteps = new Property(32, Long.class, "maxDaySteps", false, "MAX_DAY_STEPS");
        public final static Property StartExerciseTime = new Property(33, Long.class, "startExerciseTime", false, "START_EXERCISE_TIME");
        public final static Property TotalCalories = new Property(34, Double.class, "totalCalories", false, "TOTAL_CALORIES");
        public final static Property TotalDistance = new Property(35, Double.class, "totalDistance", false, "TOTAL_DISTANCE");
        public final static Property TotalExerciseDays = new Property(36, Integer.class, "totalExerciseDays", false, "TOTAL_EXERCISE_DAYS");
        public final static Property TotalSteps = new Property(37, Long.class, "totalSteps", false, "TOTAL_STEPS");
    };


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACCOUNT\" TEXT," + // 1: account
                "\"PASSWORD\" TEXT," + // 2: password
                "\"TOKEN\" TEXT," + // 3: token
                "\"UNIT_SYSTEM\" TEXT," + // 4: unitSystem
                "\"BIRTHDAY\" TEXT," + // 5: birthday
                "\"GENDER\" TEXT," + // 6: gender
                "\"NICKNAME\" TEXT," + // 7: nickname
                "\"HEIGHT\" INTEGER," + // 8: height
                "\"WEIGHT\" REAL," + // 9: weight
                "\"STEP_TARGET\" INTEGER," + // 10: stepTarget
                "\"WEIGHT_TARGET\" REAL," + // 11: weightTarget
                "\"SLEEP_TARGET\" INTEGER," + // 12: sleepTarget
                "\"UID\" TEXT," + // 13: uid
                "\"DID\" TEXT," + // 14: did
                "\"ACCOUNT_VERIFIED\" INTEGER," + // 15: accountVerified
                "\"AVATAR\" TEXT," + // 16: avatar
                "\"AVATAR_MD5\" TEXT," + // 17: avatarMD5
                "\"BACKGROUND\" TEXT," + // 18: background
                "\"BACKGROUND_MD5\" TEXT," + // 19: backgroundMD5
                "\"BLOOD_TYPE\" TEXT," + // 20: bloodType
                "\"CITY\" TEXT," + // 21: city
                "\"COUNTRY\" TEXT," + // 22: country
                "\"LATITUDE\" REAL," + // 23: latitude
                "\"LONGITUDE\" REAL," + // 24: longitude
                "\"PROVINCE\" TEXT," + // 25: province
                "\"LANGUAGE\" TEXT," + // 26: language
                "\"OS_TYPE\" TEXT," + // 27: osType
                "\"OS_VERSION\" TEXT," + // 28: osVersion
                "\"PHONE_MODEL\" TEXT," + // 29: phoneModel
                "\"TIMEZONE\" INTEGER," + // 30: timezone
                "\"ACHIEVEMENTS\" TEXT," + // 31: achievements
                "\"MAX_DAY_STEPS\" INTEGER," + // 32: maxDaySteps
                "\"START_EXERCISE_TIME\" INTEGER," + // 33: startExerciseTime
                "\"TOTAL_CALORIES\" REAL," + // 34: totalCalories
                "\"TOTAL_DISTANCE\" REAL," + // 35: totalDistance
                "\"TOTAL_EXERCISE_DAYS\" INTEGER," + // 36: totalExerciseDays
                "\"TOTAL_STEPS\" INTEGER);"); // 37: totalSteps
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(4, token);
        }
 
        String unitSystem = entity.getUnitSystem();
        if (unitSystem != null) {
            stmt.bindString(5, unitSystem);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(6, birthday);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(7, gender);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(8, nickname);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(9, height);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(10, weight);
        }
 
        Integer stepTarget = entity.getStepTarget();
        if (stepTarget != null) {
            stmt.bindLong(11, stepTarget);
        }
 
        Double weightTarget = entity.getWeightTarget();
        if (weightTarget != null) {
            stmt.bindDouble(12, weightTarget);
        }
 
        Integer sleepTarget = entity.getSleepTarget();
        if (sleepTarget != null) {
            stmt.bindLong(13, sleepTarget);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(14, uid);
        }
 
        String did = entity.getDid();
        if (did != null) {
            stmt.bindString(15, did);
        }
 
        Boolean accountVerified = entity.getAccountVerified();
        if (accountVerified != null) {
            stmt.bindLong(16, accountVerified ? 1L: 0L);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(17, avatar);
        }
 
        String avatarMD5 = entity.getAvatarMD5();
        if (avatarMD5 != null) {
            stmt.bindString(18, avatarMD5);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(19, background);
        }
 
        String backgroundMD5 = entity.getBackgroundMD5();
        if (backgroundMD5 != null) {
            stmt.bindString(20, backgroundMD5);
        }
 
        String bloodType = entity.getBloodType();
        if (bloodType != null) {
            stmt.bindString(21, bloodType);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(22, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(23, country);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(24, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(25, longitude);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(26, province);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(27, language);
        }
 
        String osType = entity.getOsType();
        if (osType != null) {
            stmt.bindString(28, osType);
        }
 
        String osVersion = entity.getOsVersion();
        if (osVersion != null) {
            stmt.bindString(29, osVersion);
        }
 
        String phoneModel = entity.getPhoneModel();
        if (phoneModel != null) {
            stmt.bindString(30, phoneModel);
        }
 
        Integer timezone = entity.getTimezone();
        if (timezone != null) {
            stmt.bindLong(31, timezone);
        }
 
        String achievements = entity.getAchievements();
        if (achievements != null) {
            stmt.bindString(32, achievements);
        }
 
        Long maxDaySteps = entity.getMaxDaySteps();
        if (maxDaySteps != null) {
            stmt.bindLong(33, maxDaySteps);
        }
 
        Long startExerciseTime = entity.getStartExerciseTime();
        if (startExerciseTime != null) {
            stmt.bindLong(34, startExerciseTime);
        }
 
        Double totalCalories = entity.getTotalCalories();
        if (totalCalories != null) {
            stmt.bindDouble(35, totalCalories);
        }
 
        Double totalDistance = entity.getTotalDistance();
        if (totalDistance != null) {
            stmt.bindDouble(36, totalDistance);
        }
 
        Integer totalExerciseDays = entity.getTotalExerciseDays();
        if (totalExerciseDays != null) {
            stmt.bindLong(37, totalExerciseDays);
        }
 
        Long totalSteps = entity.getTotalSteps();
        if (totalSteps != null) {
            stmt.bindLong(38, totalSteps);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // token
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unitSystem
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // birthday
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gender
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nickname
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // height
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // weight
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // stepTarget
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // weightTarget
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // sleepTarget
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // uid
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // did
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // accountVerified
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // avatar
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // avatarMD5
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // background
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // backgroundMD5
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // bloodType
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // city
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // country
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // latitude
            cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24), // longitude
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // province
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // language
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // osType
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // osVersion
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // phoneModel
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // timezone
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // achievements
            cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32), // maxDaySteps
            cursor.isNull(offset + 33) ? null : cursor.getLong(offset + 33), // startExerciseTime
            cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34), // totalCalories
            cursor.isNull(offset + 35) ? null : cursor.getDouble(offset + 35), // totalDistance
            cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36), // totalExerciseDays
            cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37) // totalSteps
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnitSystem(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthday(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGender(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNickname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHeight(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setWeight(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setStepTarget(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setWeightTarget(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setSleepTarget(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setUid(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAccountVerified(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setAvatar(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAvatarMD5(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBackground(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBackgroundMD5(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBloodType(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCity(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCountry(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLatitude(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setLongitude(cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24));
        entity.setProvince(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setLanguage(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setOsType(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setOsVersion(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setPhoneModel(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setTimezone(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setAchievements(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setMaxDaySteps(cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32));
        entity.setStartExerciseTime(cursor.isNull(offset + 33) ? null : cursor.getLong(offset + 33));
        entity.setTotalCalories(cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34));
        entity.setTotalDistance(cursor.isNull(offset + 35) ? null : cursor.getDouble(offset + 35));
        entity.setTotalExerciseDays(cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36));
        entity.setTotalSteps(cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Account entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Account entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
