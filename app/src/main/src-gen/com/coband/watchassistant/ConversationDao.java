package com.coband.watchassistant;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.coband.watchassistant.Conversation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONVERSATION".
*/
public class ConversationDao extends AbstractDao<Conversation, String> {

    public static final String TABLENAME = "CONVERSATION";

    /**
     * Properties of entity Conversation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ConversationId = new Property(0, String.class, "conversationId", true, "CONVERSATION_ID");
        public final static Property MembersId = new Property(1, String.class, "membersId", false, "MEMBERS_ID");
        public final static Property CreaterId = new Property(2, String.class, "createrId", false, "CREATER_ID");
        public final static Property Last_message_time = new Property(3, java.util.Date.class, "last_message_time", false, "LAST_MESSAGE_TIME");
        public final static Property Last_message = new Property(4, String.class, "last_message", false, "LAST_MESSAGE");
        public final static Property Silent = new Property(5, boolean.class, "silent", false, "SILENT");
        public final static Property Cache_message = new Property(6, String.class, "cache_message", false, "CACHE_MESSAGE");
    };


    public ConversationDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONVERSATION\" (" + //
                "\"CONVERSATION_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: conversationId
                "\"MEMBERS_ID\" TEXT," + // 1: membersId
                "\"CREATER_ID\" TEXT," + // 2: createrId
                "\"LAST_MESSAGE_TIME\" INTEGER," + // 3: last_message_time
                "\"LAST_MESSAGE\" TEXT," + // 4: last_message
                "\"SILENT\" INTEGER NOT NULL ," + // 5: silent
                "\"CACHE_MESSAGE\" TEXT);"); // 6: cache_message
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONVERSATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        String conversationId = entity.getConversationId();
        if (conversationId != null) {
            stmt.bindString(1, conversationId);
        }
 
        String membersId = entity.getMembersId();
        if (membersId != null) {
            stmt.bindString(2, membersId);
        }
 
        String createrId = entity.getCreaterId();
        if (createrId != null) {
            stmt.bindString(3, createrId);
        }
 
        java.util.Date last_message_time = entity.getLast_message_time();
        if (last_message_time != null) {
            stmt.bindLong(4, last_message_time.getTime());
        }
 
        String last_message = entity.getLast_message();
        if (last_message != null) {
            stmt.bindString(5, last_message);
        }
        stmt.bindLong(6, entity.getSilent() ? 1L: 0L);
 
        String cache_message = entity.getCache_message();
        if (cache_message != null) {
            stmt.bindString(7, cache_message);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Conversation readEntity(Cursor cursor, int offset) {
        Conversation entity = new Conversation( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // conversationId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // membersId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createrId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // last_message_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // last_message
            cursor.getShort(offset + 5) != 0, // silent
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // cache_message
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Conversation entity, int offset) {
        entity.setConversationId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMembersId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreaterId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLast_message_time(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setLast_message(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSilent(cursor.getShort(offset + 5) != 0);
        entity.setCache_message(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Conversation entity, long rowId) {
        return entity.getConversationId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Conversation entity) {
        if(entity != null) {
            return entity.getConversationId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
